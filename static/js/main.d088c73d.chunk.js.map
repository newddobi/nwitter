{"version":3,"sources":["fbase.js","components/AuthForm.js","routes/Auth.js","components/Nweet.js","components/NweetFactory.js","routes/Home.js","routes/Profile.js","components/Navigation.js","components/Router.js","components/App.js","index.js"],"names":["firebase","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","authService","dbService","storageService","firebaseInstance","AuthForm","useState","email","setEmail","password","setPassword","newAccount","setNewAccount","error","setError","onChange","event","target","name","value","onSubmit","a","preventDefault","createUserWithEmailAndPassword","data","signInWithEmailAndPassword","console","log","message","className","type","placeholder","required","onClick","prev","Auth","onSocialClick","provider","auth","GoogleAuthProvider","GithubAuthProvider","signInWithPopup","icon","faTwitter","color","size","style","marginBottom","faGoogle","faGithub","Nweet","nweetObj","isOwner","editing","setEditing","text","newNweet","setNewNweet","onDeleteClick","ok","window","confirm","doc","id","delete","refFromURL","attachmentUrl","toggleEditing","update","autoFocus","src","class","faTrash","faPencilAlt","NweetFactory","userObj","nweet","setNweet","attachment","setAttachment","attachmentRef","ref","child","uid","uuidv4","putString","response","getDownloadURL","createdAt","Date","now","creatorId","collection","add","maxLength","htmlFor","faPlus","accept","theFile","files","reader","FileReader","onloadend","finishedEvent","result","currentTarget","readAsDataURL","opacity","backgroundImage","faTimes","Home","nweets","setNweets","useEffect","onSnapshot","snapshot","nweetArray","docs","map","marginTop","key","refreshUser","history","useHistory","displayName","newDisplayName","setNewDisplayName","getMyNweets","where","orderBy","get","updateProfile","signOut","push","Navigation","display","justifyContent","to","marginRight","marginLeft","flexDirection","alignItems","fontSize","faUser","AppRouter","isLoggedIn","maxWidth","width","margin","exact","path","Profile","from","App","init","setInit","setUserObj","onAuthStateChanged","user","args","currentUser","Boolean","getFullYear","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d088c73d.chunk.js","sourcesContent":["import * as firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport \"firebase/firestore\";\nimport \"firebase/storage\";\n\nconst firebaseConfig = {\n    apiKey: process.env.REACT_APP_API_KEY,\n    authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n    databaseURL: process.env.REACT_APP_DATABASE_URL,\n    projectId: process.env.REACT_APP_PROJECT_ID,\n    storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n    messagingSenderId: process.env.REACT_APP_MESSAGIN_ID,\n    appId: process.env.REACT_APP_APP_ID,\n};\n\nfirebase.initializeApp(firebaseConfig);\n\n// 파이어베이스의 모든 기능을 export 하기보다 사용하고 싶은 것을 export하여 사용한다.\nexport const authService = firebase.auth();\nexport const dbService = firebase.firestore();\nexport const storageService = firebase.storage();\n\nexport const firebaseInstance = firebase;\n","import { authService } from \"fbase\";\nimport React, { useState } from \"react\";\n\nconst AuthForm = () => {\n    const [email, setEmail] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n    const [newAccount, setNewAccount] = useState(true);\n    const [error, setError] = useState(\"\");\n    // 서로 다른 onChange function을 만들지 않기 위해 하나를 만들어 사용한다.\n    const onChange = (event) => {\n        const {\n            target: { name, value },\n        } = event;\n        if (name === \"email\") {\n            setEmail(value);\n        } else if (name === \"password\") {\n            setPassword(value);\n        }\n    };\n    const onSubmit = async (event) => {\n        // 내가 컨트롤 할 수 있게 기본 이벤트를 방지한다.\n        // 예를들어 form의 onSubmit을 누르면 새 페이지로 리프레쉬 되는데 이를 방지해준다.\n        event.preventDefault();\n        try {\n            let data;\n            if (newAccount) {\n                // create account\n                // createUserWithEmailAndPassword는 Promise 객체를 반환한다.\n                // 사용자 계정을 성공적으로 만들면, 이 사용자는 어플리케이션에 바로 로그인 될 것이다.\n                data = await authService.createUserWithEmailAndPassword(\n                    email,\n                    password\n                );\n            } else {\n                // log in\n                data = await authService.signInWithEmailAndPassword(\n                    email,\n                    password\n                );\n            }\n            console.log(data);\n        } catch (error) {\n            setError(error.message);\n        }\n    };\n\n    // newAccount의 이전 값을 가져와서 그 값에 반대되는 것을 반환\n    const toggleAccount = () => setNewAccount((prev) => !prev);\n\n    return (\n        <>\n            <form onSubmit={onSubmit} className=\"container\">\n                <input\n                    name=\"email\"\n                    type=\"email\"\n                    placeholder=\"Email\"\n                    required\n                    value={email}\n                    onChange={onChange}\n                    className=\"authInput\"\n                />\n                <input\n                    name=\"password\"\n                    type=\"password\"\n                    placeholder=\"Password\"\n                    required\n                    value={password}\n                    onChange={onChange}\n                    className=\"authInput\"\n                />\n                <input\n                    type=\"submit\"\n                    className=\"authInput authSubmit\"\n                    value={newAccount ? \"Create Account\" : \"Log In\"}\n                />\n                {error && <span className=\"authError\">{error}</span>}\n            </form>\n            <span onClick={toggleAccount} className=\"authSwitch\">\n                {newAccount ? \"Sign in\" : \"Create Account\"}\n            </span>\n        </>\n    );\n};\n\nexport default AuthForm;\n","import React from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n    faTwitter,\n    faGoogle,\n    faGithub,\n} from \"@fortawesome/free-brands-svg-icons\";\nimport AuthForm from \"components/AuthForm\";\nimport { authService, firebaseInstance } from \"fbase\";\n\n// 자동으로 import를 해주려면 const와 export default 분리하여 사용\nconst Auth = () => {\n    const onSocialClick = async (event) => {\n        const {\n            target: { name },\n        } = event;\n        let provider;\n        if (name === \"google\") {\n            provider = new firebaseInstance.auth.GoogleAuthProvider();\n        } else if (name === \"github\") {\n            provider = new firebaseInstance.auth.GithubAuthProvider();\n        }\n        const data = await authService.signInWithPopup(provider);\n        console.log(data);\n    };\n    return (\n        <div className=\"authContainer\">\n            <FontAwesomeIcon\n                icon={faTwitter}\n                color={\"#04AAFF\"}\n                size=\"3x\"\n                style={{ marginBottom: 30 }}\n            />\n            <AuthForm />\n            {/* social link들을 렌더링하는 또 다른 컴포넌트들을 만들 수 있다 */}\n            <div className=\"authBtns\">\n                <button\n                    onClick={onSocialClick}\n                    name=\"google\"\n                    className=\"authBtn\"\n                >\n                    Continue with Google <FontAwesomeIcon icon={faGoogle} />\n                </button>\n                <button\n                    onClick={onSocialClick}\n                    name=\"github\"\n                    className=\"authBtn\"\n                >\n                    Continue with Github <FontAwesomeIcon icon={faGithub} />\n                </button>\n            </div>\n        </div>\n    );\n};\nexport default Auth;\n","import { dbService, storageService } from \"fbase\";\nimport React, { useState } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faTrash, faPencilAlt } from \"@fortawesome/free-solid-svg-icons\";\n\nconst Nweet = ({ nweetObj, isOwner }) => {\n    // 수정모드인지 아닌지 알려줌\n    const [editing, setEditing] = useState(false);\n    // input에 입력된 text 업데이트\n    const [newNweet, setNewNweet] = useState(nweetObj.text);\n\n    const onDeleteClick = async () => {\n        const ok = window.confirm(\n            \"Are you sure you want to delete this nweet?\"\n        );\n        console.log(ok);\n        if (ok) {\n            await dbService.doc(`nweets/${nweetObj.id}`).delete();\n            // 저장된 사진 지우기\n            await storageService.refFromURL(nweetObj.attachmentUrl).delete();\n        }\n    };\n\n    const toggleEditing = () => setEditing((prev) => !prev);\n\n    const onSubmit = async (event) => {\n        event.preventDefault();\n        console.log(nweetObj, newNweet);\n        await dbService.doc(`nweets/${nweetObj.id}`).update({\n            text: newNweet,\n        });\n        setEditing(false);\n    };\n\n    const onChange = (event) => {\n        const {\n            target: { value },\n        } = event;\n        setNewNweet(value);\n    };\n\n    return (\n        <div className=\"nweet\">\n            {editing ? (\n                <>\n                    {/* 보안에 신경쓰고 싶다면 주인인 사람만 form을 볼 수 있도록 할 수 있다 */}\n                    {isOwner && (\n                        <>\n                            <form\n                                onSubmit={onSubmit}\n                                className=\"container nweetEdit\"\n                            >\n                                <input\n                                    type=\"text\"\n                                    placeholder=\"Edit your nweet\"\n                                    value={newNweet}\n                                    required\n                                    autoFocus\n                                    onChange={onChange}\n                                    className=\"formInput\"\n                                />\n                                <input\n                                    type=\"submit\"\n                                    value=\"Update Nweet\"\n                                    className=\"formBtn\"\n                                />\n                            </form>\n                            <span\n                                onClick={toggleEditing}\n                                className=\"formBtn cancelBtn\"\n                            >\n                                Cancel\n                            </span>\n                        </>\n                    )}\n                </>\n            ) : (\n                <>\n                    <h4>{nweetObj.text}</h4>\n                    {nweetObj.attachmentUrl && (\n                        <img src={nweetObj.attachmentUrl} />\n                    )}\n                    {isOwner && (\n                        <div class=\"nweet__actions\">\n                            <span onClick={onDeleteClick}>\n                                <FontAwesomeIcon icon={faTrash} />\n                            </span>\n                            <span onClick={toggleEditing}>\n                                <FontAwesomeIcon icon={faPencilAlt} />\n                            </span>\n                        </div>\n                    )}\n                </>\n            )}\n        </div>\n    );\n};\n\nexport default Nweet;\n","import { dbService, storageService } from \"fbase\";\nimport React, { useState } from \"react\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlus, faTimes } from \"@fortawesome/free-solid-svg-icons\";\n\nconst NweetFactory = ({ userObj }) => {\n    const [nweet, setNweet] = useState(\"\");\n    const [attachment, setAttachment] = useState(\"\");\n\n    const onSubmit = async (event) => {\n        if (nweet === \"\") {\n            return;\n        }\n\n        event.preventDefault();\n\n        // for lexical scope issue\n        let attachmentUrl = \"\";\n\n        if (attachment !== \"\") {\n            // 파일에 대한 reference 생성후, 파일을 몇몇 내용과 함께 업데이트\n            // 유저 아이디를 기반으로 폴더를 분리\n            // uuid 라이브러리 사용 - 특별한 식별자를 랜덤으로 생성\n            const attachmentRef = storageService\n                .ref()\n                .child(`${userObj.uid}/${uuidv4()}`);\n\n            // 두 번째 인자는 format을 의미한다. readAsDataUrl로 읽었으니 data_url로 설정해준다.\n            // putString은 Uploading task를 반환한다.\n            const response = await attachmentRef.putString(\n                attachment,\n                \"data_url\"\n            );\n            attachmentUrl = await response.ref.getDownloadURL();\n        }\n\n        const nweetObj = {\n            text: nweet,\n            createdAt: Date.now(),\n            creatorId: userObj.uid,\n            attachmentUrl,\n        };\n\n        // Promise 객체 반환\n        await dbService.collection(\"nweets\").add(nweetObj);\n\n        // submit하고 나면 입력창 공백으로 설정\n        setNweet(\"\");\n        setAttachment(\"\");\n    };\n\n    const onChange = (event) => {\n        // event 안에 있는 target 안에 있는 value를 달라고 하는 것\n        const {\n            target: { value },\n        } = event;\n        setNweet(value);\n    };\n\n    const onFileChange = (event) => {\n        const {\n            target: { files },\n        } = event;\n        const theFile = files[0];\n\n        // 파일을 읽기 위해 fileReader API 사용\n        const reader = new FileReader();\n\n        // reader에 event listener 추가\n        // finishedEvent의 result는 사진을 텍스트로 반환시켜준 값 브라우저는 이 텍스트를 사진으로 바꿀 수 있다\n        reader.onloadend = (finishedEvent) => {\n            const {\n                currentTarget: { result },\n            } = finishedEvent;\n            setAttachment(result);\n        };\n        reader.readAsDataURL(theFile);\n    };\n\n    const onClearAttachment = () => setAttachment(\"\");\n\n    return (\n        <form onSubmit={onSubmit} className=\"factoryForm\">\n            <div className=\"factoryInput__container\">\n                <input\n                    className=\"factoryInput__input\"\n                    value={nweet}\n                    onChange={onChange}\n                    type=\"text\"\n                    placeholder=\"What's on your mind?\"\n                    maxLength={120}\n                />\n                <input\n                    type=\"submit\"\n                    value=\"&rarr;\"\n                    className=\"factoryInput__arrow\"\n                />\n            </div>\n            <label htmlFor=\"attach-file\" className=\"factoryInput__label\">\n                <span>Add photos</span>\n                <FontAwesomeIcon icon={faPlus} />\n            </label>\n            <input\n                id=\"attach-file\"\n                type=\"file\"\n                accept=\"image/*\"\n                onChange={onFileChange}\n                style={{\n                    opacity: 0,\n                }}\n            />\n            {attachment && (\n                <div className=\"factoryForm__attachment\">\n                    <img\n                        src={attachment}\n                        style={{\n                            backgroundImage: attachment,\n                        }}\n                    />\n                    <div\n                        className=\"factoryForm__clear\"\n                        onClick={onClearAttachment}\n                    >\n                        <span>Remove</span>\n                        <FontAwesomeIcon icon={faTimes} />\n                    </div>\n                </div>\n            )}\n        </form>\n    );\n};\n\nexport default NweetFactory;\n","import Nweet from \"components/Nweet\";\nimport { dbService } from \"fbase\";\nimport React, { useEffect, useState } from \"react\";\nimport NweetFactory from \"components/NweetFactory\";\n\nconst Home = ({ userObj }) => {\n\n    const [nweets, setNweets] = useState([]);\n\n\n    // 오래된 방식이기 때문에 다른 방법으로 코드 작성\n    // async를 써야하기 때문에 개별함수로 작성\n    // const getNweets = async() => {\n    //     // get은 Query Snapshot을 반환한다. Query Snapshot은\n    //     // docs, empty, metadata, query, size 등 여러가지를 가지고 있다.\n    //     const dbNweets = await dbService.collection(\"nweets\").get();\n    //     dbNweets.forEach(document => {\n    //         const nweetObject = {\n    //             ...document.data(),\n    //             id: document.id,\n    //         }\n    //         // 새로 작성한 트윗과 그 이전 것들을 반환\n    //         /*\n    //             처음봤다면 헷갈릴 수도 있다.\n    //             가끔, set이 붙는 함수를 쓸 때, 값 대신에 함수를 전달할 수 있다.\n    //             그리고 만약 함수를 전달하면 리액트는 이전 값에 접근할 수 있게 해준다.\n    //         */\n    //         setNweets(prev => [nweetObject, ...prev]);\n    //     });\n    // }\n\n    // 위의 getNweets 방식보더 더 적게 re-render 하기 때문에 더 빠르게 실행하도록 만들어준다\n    useEffect(() => {\n        // getNweets();\n\n        // 데이터 베이스의 변화를 알려줌(read, delete, update etc)\n        // nweets는 우리가 페이지를 불러올 때 snapshot에서 나온다\n        // listener로 snapshot을 사용중\n        dbService.collection(\"nweets\").onSnapshot((snapshot) => {\n            const nweetArray = snapshot.docs.map((doc) => ({\n                id: doc.id,\n                ...doc.data(),\n            }));\n            setNweets(nweetArray);\n        });\n    }, []);\n\n    return (\n        <div className=\"container\">\n            <NweetFactory userObj={userObj} />\n            <div style={{ marginTop: 30 }}>\n                {nweets.map((nweet) => (\n                    <Nweet\n                        key={nweet.id}\n                        nweetObj={nweet}\n                        isOwner={nweet.creatorId === userObj.uid}\n                    />\n                ))}\n            </div>\n        </div>\n    );\n};\nexport default Home;\n","import { authService, dbService } from \"fbase\";\nimport React, { useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nexport default ({ refreshUser, userObj }) => {\n    const history = useHistory();\n    const [newDisplayName, setNewDisplayName] = useState(userObj.displayName);\n\n    useEffect(() => {\n        getMyNweets();\n    }, []);\n\n    const onLogOutClick = () => {\n        authService.signOut();\n        history.push(\"/\");\n    };\n\n    const getMyNweets = async () => {\n        // where 등으로 DB를 필터링 할 수 있다\n        const nweets = await dbService\n            .collection(\"nweets\")\n            .where(\"creatorId\", \"==\", userObj.uid)\n            .orderBy(\"createdAt\")\n            .get();\n        console.log(nweets.docs.map((doc) => doc.data()));\n    };\n\n    const onChange = (event) => {\n        const {\n            target: { value },\n        } = event;\n        setNewDisplayName(value);\n    };\n\n    const onSubmit = async (event) => {\n        event.preventDefault();\n        // 이름이 변경됐을 때만 수정 가능\n        // 파이어베이스의 한계 - 유저 프로필에 많은 정보를 담을 수가 없다\n        if (userObj.displayName !== newDisplayName) {\n            // updateProfile 메소드는 아무것도 반환하지 않는다\n            // 이슈발생 - 사용자 이름을 바꿔도 화면에서는 이전 이름을 가지고 있다\n            await userObj.updateProfile({\n                displayName: newDisplayName,\n            });\n            // firebase에 있는 profile을 업데이트 시켜준 후에 리액트에 있는 profile 새로고침\n            refreshUser();\n        }\n    };\n\n    return (\n        <div className=\"container\">\n            <form onSubmit={onSubmit} className=\"profileForm\">\n                <input\n                    onChange={onChange}\n                    type=\"text\"\n                    autoFocus\n                    placeholder=\"Display name\"\n                    value={newDisplayName}\n                    className=\"formInput\"\n                />\n                <input\n                    type=\"submit\"\n                    value=\"Update Profile\"\n                    className=\"formBtn\"\n                    style={{\n                        marginTop: 10,\n                    }}\n                />\n            </form>\n            <span className=\"formBtn cancelBtn logOut\" onClick={onLogOutClick}>\n                Log Out\n            </span>\n        </div>\n    );\n};\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faTwitter } from \"@fortawesome/free-brands-svg-icons\";\nimport { faUser } from \"@fortawesome/free-solid-svg-icons\";\n\nconst Navigation = ({ userObj }) => (\n    <nav>\n        <ul\n            style={{ display: \"flex\", justifyContent: \"center\", marginTop: 50 }}\n        >\n            <li>\n                <Link to=\"/\" style={{ marginRight: 10 }}>\n                    <FontAwesomeIcon\n                        icon={faTwitter}\n                        color={\"#04AAFF\"}\n                        size=\"2x\"\n                    />\n                </Link>\n            </li>\n            <li>\n                <Link\n                    to=\"/profile\"\n                    style={{\n                        marginLeft: 10,\n                        display: \"flex\",\n                        flexDirection: \"column\",\n                        alignItems: \"center\",\n                        fontSize: 12,\n                    }}\n                >\n                    <FontAwesomeIcon\n                        icon={faUser}\n                        color={\"#04AAFF\"}\n                        size=\"2x\"\n                    />\n                    <span style={{ marginTop: 10 }}>\n                        {userObj.displayName\n                            ? `${userObj.displayName}의 Profile`\n                            : \"Profile\"}\n                    </span>\n                </Link>\n            </li>\n        </ul>\n    </nav>\n);\nexport default Navigation;\n","import React from \"react\";\nimport {\n    HashRouter as Router,\n    Redirect,\n    Route,\n    Switch,\n} from \"react-router-dom\";\nimport Auth from \"../routes/Auth\";\nimport Home from \"../routes/Home\";\nimport Profile from \"routes/Profile\";\nimport Navigation from \"components/Navigation\";\n\n// 라우터에서 useState를 사용하는 것을 지양하자. 라우터는 Routes들만 보여주는 기능을 가지는게 맞다고 생각되기 때문이다.\nconst AppRouter = ({ refreshUser, isLoggedIn, userObj }) => {\n    return (\n        <Router>\n            {isLoggedIn && <Navigation userObj={userObj} />}\n            <Switch>\n                {isLoggedIn ? (\n                    <div\n                        style={{\n                            maxWidth: 890,\n                            width: \"100%\",\n                            margin: \"0 auto\",\n                            marginTop: 80,\n                            display: \"flex\",\n                            justifyContent: \"center\",\n                        }}\n                    >\n                        <Route exact path=\"/\">\n                            <Home userObj={userObj} />\n                        </Route>\n                        <Route exact path=\"/profile\">\n                            <Profile\n                                refreshUser={refreshUser}\n                                userObj={userObj}\n                            />\n                        </Route>\n                        <Redirect from=\"*\" to=\"/\" />\n                    </div>\n                ) : (\n                    <>\n                        <Route exact path=\"/\">\n                            <Auth />\n                        </Route>\n                        <Redirect from=\"*\" to=\"/\" />\n                    </>\n                )}\n            </Switch>\n        </Router>\n    );\n};\n\nexport default AppRouter;\n","import React, { useEffect, useState } from \"react\";\nimport AppRouter from \"components/Router\";\nimport { authService } from \"fbase\";\n\nfunction App() {\n    const [init, setInit] = useState(false);\n    // const [isLoggedIn, setIsLoggedIn] = useState(false);\n    // 유저정보의 경우 애플리케이션의 최상단에 있어야 여러 컴포넌트, 라우터로 보낼 수 있다\n    const [userObj, setUserObj] = useState(null);\n\n    // authService.currentUser는 파이어베이스에서 정보를 받아와야하기 때문에 어플리케이션이 초기화 됐을때는 null이다가 이후 값이 채워진다.\n    // 사용자의 상태를 지속적으로 체크하는 onAuthStateChanged를 사용해야 한다.\n    // console.log(authService.currentUser);\n    // setInterval(() => {\n    //   console.log(authService.currentUser);\n    // }, 2000);\n\n    // 우리가 실제로 로그인이 되었는지 안 되었는지를 알 수 있다.\n    useEffect(() => {\n        authService.onAuthStateChanged((user) => {\n            if (user) {\n                setUserObj({\n                    displayName: user.displayName,\n                    uid: user.uid,\n                    updateProfile: (args) => user.updateProfile(args),\n                });\n            } else {\n                setUserObj(null);\n            }\n            // init이 false라면 router를 숨길 것이다.\n            setInit(true);\n        });\n    }, []);\n\n    // 유저정보가 바뀌면 다른 컴포넌트들에게 정보 전달\n    const refreshUser = () => {\n        const user = authService.currentUser;\n        \n        setUserObj({\n            displayName: user.displayName,\n            uid: user.uid,\n            updateProfile: (args) => user.updateProfile(args),\n        });\n    };\n\n    return (\n        <>\n            {/* 기본적으로 userObj가 존재할 때 로그인이 된다 */}\n            {init ? (\n                <AppRouter\n                    refreshUser={refreshUser}\n                    isLoggedIn={Boolean(userObj)}\n                    userObj={userObj}\n                />\n            ) : (\n                \"Initializing\"\n            )}\n            <footer>&copy; {new Date().getFullYear()} Nwitter </footer>\n        </>\n    );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport \"./styles.css\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n"],"sourceRoot":""}